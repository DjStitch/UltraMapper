
TODO:

- Flattening convention

- Automatic reverse mapping (at the time a reverse mapping is resolved by convention. Take into account manual overrides.)

- Collection mapping strategies 

- Collections now work only by clear/adding. 
  Before we could work with constructor(IEnumeable<T>) in some particular cases
  (identical source and target types), which is much faster.

- ReadOnlyCollection support, at least on members (directly on type is a problem because it does not have a parameterless constructor).
  
- Dynamic mapping

- Object to Object mapping should inspect object types and use ReferenceMapper.
  At this time it copies the reference value (no mapping at all). Remove object from built in types.

- Abstract and base classes map with derived types inheriting the configuration

- VERIFY_MAPPING: Search for objects sharing the same reference in the source and check 
  that on the target those objects are mapped to a single object sharing the same reference

- Multidimensional/jagged arrays; Array mapping.

- CustomConverter for reference type do not support return of an object to recurse on (?).

- Analyze how to manage structs correctly (complex struct should be mapped with reference mapper,
simple structs with a primitive mapper)

- Configuration inheritance (ie. IgnoreConvention)

KNOWN (POTENTIAL) PROBLEMS:

- Configurations can be shared, but not susequently edited because conventions and expression builders are not run again.
  Introduce a seal mechanism to inform the user or a configuration refresh mechanism. 

- When manually mapping using deep nested selectors (ie: projections, ie: x=>x.PropertyA.GetMethodB().GetFieldC() ), 
  all instances referred by the selector (both on source and target) must be instantiated. 
  
  At the time to avoid NullReferenceException on target side
  it is possible to instantiate the target and set 
  ReferenceMappingStrategy = USE_TARGET_INSTANCE_IF_NOT_NULL.
  
  SOURCE SIDE: An automatic mechanism checking for null reference for each reference
  access could solve the problem on source side but implies the splitting and the analysis of the selctor.
  
  TARGET SIDE: An automatic mechanism instantiating a null reference could be useful 
  to solve the problem on target side but implies the splitting and the analysis of the selctor.
