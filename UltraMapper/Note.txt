PROBLEMS:
	
KNOWN (POTENTIAL) PROBLEMS:

- Configuration can be done against interfaces and base classes but at
  runtime we should always work with the actual concrete type.
  While performing the mapping step we should always get the configuration 
  of the concrete type via 'GetType()' (avoid typeof(T))

- When unflattening by convention OR manually mapping using deep nested member selectors (ie: projections, ie: x => x.PropertyA.GetMethodB().GetFieldC() ), 
  all instances referred by the selector (both on source and target) must be instantiated or you can incur in NullReferenceException. 
	
  ON SOURCE SIDE: The problem has been solved by checking for null references before accessing members. OK! 
  
  ON TARGET SIDE: The problem has been solved by instantiating a new instance of every null object in the expression. OK!
				  MINOR PROBLEM: Custom constructors are not taken into account and the type must have a parameterless public constructor.

- Collection mapping strategies: when updating order is not preserved 
	(this could be right since it is implied that we keep using the existing target collection).

- Reference type's CustomConverters do not recurse on inner references.
	(this might be correct since the entire mapping is delegated to the user).   

- CustomConverters do not add references to the ReferenceTracker.
	(this is obvious and might be correct. Maybe just pass a reference to the ReferenceTracker to delegate this to the user).   

- Configurations can be shared, but not subsequently edited because conventions and expression builders are not run again.
  Introduce a seal mechanism to inform the user about this; or a configuration refresh mechanism. 

- Mapping types not providing a parameterless constructor is probably feasible but would need a big refactor.
  One example is ReadOnlyCollection support: it is supported only if we find it as a target's member.

TODO:

- ArrayMapper does not handle CollectionBehaviors.

- Automatic reverse mapping (at the time a reverse mapping is a normal mapping
  encountered at execution time and resolved by convention and thus does not take into account manual overrides).

- Dynamic mapping

- Simple members inherits type mapping configuration BUT complex types do not.

- Member configuration should work regardless the type of the members involved.
  This would solve EntityFramework problems with DynamicProxies not reading the 
  configuration (stored by type and not taken into account because concrete object type != dynamic proxied type).
  Type configuration, instead, obviously should work only exactly for the specified types

- Configurators need extra overloads to cover target member mapping via methods Get/Set
  (both untyped (MemberInfo), and strongly types (Lambdas) helpers are missing).

- Multidimensional/jagged arrays; 

- UNIT TEST: VERIFY MAPPING method should search for objects sharing the same reference in the source and check 
  that on the target those objects are mapped to a single object sharing the same reference


OPTIMIZATIONS: