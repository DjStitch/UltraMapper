
TODO WITH MAX PRIORITY (AFTER ARCHITECTURAL REFACTORING):

- Collections now work only by clear/adding. 
  Before we could work with constructor(IEnumeable<T>), which is much faster.
  

TODO:

- Collection mapping strategies 

- Dynamic mapping

- Object to Object mapping should inspect object types and use ReferenceMapper.
  At this time it copies the reference value (no mapping at all). Remove object from built in types.

- Abstract and base classes map with derived types inheriting the configuration

- VERIFY_MAPPING: Search for objects sharing the same reference in the source and check 
  that on the target those objects are mapped to a single object sharing the same reference

- private members mapping

- Multidimensional/jagged arrays; Array mapping.

- CustomConverter for reference type do not support return of an object to recurse on (?).

KNOWN (POTENTIAL) PROBLEMS:

- ReferenceTracking and other dictionaries that should take as key a pair of object ( such as Dictionary<TypePair,*> ),
for performance reasons, calculate a hashcode of the pair itself and use this hashcode as the key.
When dealing with many many object and types, this can lead to collisions and therefore unexpected behaviors of the mapper.
Since it is unknown if this can happen in practice and due to the performance cost of using any different approach,
the problem is ignored until it shows up in real world usage.

- When manually mapping using deep nested selectors (ie: projections, ie: x=>x.PropertyA.GetMethodB().GetFieldC() ), 
all instances referred by the selector (both on source and target) must be instantiated. 

At the time to avoid NullReferenceException on target side
it is possible to instantiate the target and set 
ReferenceMappingStrategy = USE_TARGET_INSTANCE_IF_NOT_NULL.

SOURCE SIDE: An automatic mechanism checking for null reference for each reference
access could solve the problem on source side but implies the splitting and the analysis of the selctor.

TARGET SIDE: An automatic mechanism instantiating a null reference could be useful 
to solve the problem on target side but implies the splitting and the analysis of the selctor.
